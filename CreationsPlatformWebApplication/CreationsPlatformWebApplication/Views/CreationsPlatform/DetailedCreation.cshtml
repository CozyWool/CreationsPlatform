@model DetailedCreationViewModel

<div>
    <div class="row creation-detailed w-100 m-auto">
        <div class="col-md-12">
            <h1>@Model.Creation.Title</h1>
            <p>
                @Html.DisplayNameFor(m => m.Creation.Author) <b>@Model.Creation.Author.Username</b>
            </p>
            <p>
                @Html.DisplayNameFor(m => m.Creation.Genres):
                @for (var i = 0; i < Model.Creation.Genres.Count; i++)
                {
                    <b>@Model.Creation.Genres[i].Name@(i + 1 == Model.Creation.Genres.Count ? "" : ", ")</b>
                }
            </p>
            <p>@Html.DisplayNameFor(m => m.Creation.Rating): <b>@Model.Creation.Rating (@Model.Creation.RatingCount ratings)</b></p>
            <p>@Html.DisplayNameFor(m => m.Creation.PublicationDate): <b>@Model.Creation.PublicationDate.ToShortDateString()</b></p>
        </div>
    </div>
    <textarea class="content m-auto w-100 form-control-plaintext" rows="37" readonly>@Model.Creation.Content</textarea>
</div>
<footer class="border-top footer mt-2">
    <div class="container">
        <form class="form-inline" asp-controller="CreationsPlatform" asp-action="AddComment" method="post">
            <input asp-for="Comment.CreationId" value="@Model.Creation.Id" hidden/>
            <input asp-for="Comment.CreationTitle" value="@Model.Creation.Title" hidden/>
            <div class="form-floating mb-2">
                <textarea class="form-control m-auto w-100" rows="37" asp-for="Comment.Content"></textarea>
                <label asp-for="Comment.Content">@Html.DisplayNameFor(m => m.Comment.Content)</label>
            </div>
            <button type="submit" class="btn w-100 btn-outline-dark mb-2">Опубликовать</button>
        </form>
        <h3 class="text-center">@Html.DisplayNameFor(m => m.Creation.Comments)</h3>
        <ol class="list-group list-group-numbered">
            @foreach (var comment in Model.Creation.Comments)
            {
                <li class="list-group-item d-flex justify-content-between align-items-start">
                    <div class="ms-2 me-auto">
                        <div class="fw-bold">@comment.Username</div>
                        @comment.Content
                    </div>
                    @if (User.Identity is {IsAuthenticated: true} && User.Identity.Name == comment.Username)
                    {
                        <a id="delete-btn" class="btn btn-sm btn-danger ms-auto me-2" onclick="deleteItem(@comment.Id, @comment.CreationId)">
                            Удалить
                        </a>
                    }
                    <span class="badge bg-primary rounded-pill">@comment.PublicationDate.ToLocalTime()</span>
                </li>
            }
        </ol>
        <a class="btn btn-primary text-center btn-lg w-100" href="/">Вернуться на главную</a>
    </div>
</footer>

<style>
    .creation-detailed {
        max-width: 550px;
    }

    .content {
        max-width: 1200px;
    }
</style>
<script type="text/javascript">
    async function deleteItem(id, creationId) {
        try  {
            let confirmedDelete = confirm("Вы уверены, что хотите удалить этот комментарий?")
            if (!confirmedDelete) return
            await fetch(`/CreationsPlatform/delete-comment?commentId=`+ id + "&creationId=" + creationId, {
                method: "DELETE",
                headers: { "Accept": "application/json", "Content-Type": "application/json" }
            });
            alert("Успешно удалено!")
            window.location.href = '/CreationsPlatform/id/' + creationId;
        } catch (error) {
            console.log(error);
            alert('Произошла ошибка при удалении/Нет доступа');
        }
    }
</script>